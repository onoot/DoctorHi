openapi: 3.0.0
info:
  title: Doctor Heights API
  version: 1.0.0
  description: API для управления недвижимостью и пользователями

servers:
  - url: https://api.doctorheights.pk/v1
    description: Основной API сервер

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "U001"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        cnic:
          type: string
          example: "1234567890123"
        status:
          type: string
          enum: [active, blocked]
          example: "active"
        role:
          type: string
          enum: [user, admin]
          example: "user"
        created_at:
          type: string
          format: date-time

    Transaction:
      type: object
      properties:
        id:
          type: string
          example: "T001"
        property_id:
          type: string
          example: "P001"
        previous_owner_id:
          type: string
          example: "U001"
        new_owner_id:
          type: string
          example: "U002"
        status:
          type: string
          enum: [pending, approved, rejected, cancelled]
          example: "pending"
        documents:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              type:
                type: string
              url:
                type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Property:
      type: object
      properties:
        id:
          type: string
          example: "P001"
        name:
          type: string
          example: "Storage LB01"
        type:
          type: string
          example: "storage"
        floor:
          type: string
          example: "lower_basement"
        current_owner:
          $ref: '#/components/schemas/User'
        ownership_history:
          type: array
          items:
            type: object
            properties:
              owner:
                $ref: '#/components/schemas/User'
              from_date:
                type: string
                format: date-time
              to_date:
                type: string
                format: date-time
        active_transaction:
          $ref: '#/components/schemas/Transaction'

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'

paths:
  # Маршруты для клиентов
  /client/auth/login:
    post:
      summary: Вход в систему
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Неверные учетные данные

  /client/auth/register:
    post:
      summary: Регистрация нового пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                cnic:
                  type: string
      responses:
        '201':
          description: Пользователь создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Ошибка валидации данных

  /client/properties/{propertyId}:
    get:
      summary: Получить информацию об объекте
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: propertyId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Информация об объекте
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        '404':
          description: Объект не найден

  /client/properties/{propertyId}/ownership-history:
    get:
      summary: Получить историю владения объектом
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: propertyId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: История владения объектом
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    owner:
                      $ref: '#/components/schemas/User'
                    from_date:
                      type: string
                      format: date-time
                    to_date:
                      type: string
                      format: date-time
        '404':
          description: Объект не найден

  /client/properties/{propertyId}/active-transaction:
    get:
      summary: Проверить наличие активной сделки для объекта
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: propertyId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Информация об активной сделке
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '404':
          description: Активная сделка не найдена

  /client/transactions/request:
    post:
      summary: Запросить сделку по передаче прав собственности
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                property_id:
                  type: string
                new_owner_name:
                  type: string
                new_owner_cnic:
                  type: string
      responses:
        '201':
          description: Запрос на сделку создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Ошибка валидации данных
        '409':
          description: Уже существует активная сделка для этого объекта

  /client/profile:
    get:
      summary: Получить профиль текущего пользователя
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Профиль пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /client/transactions:
    get:
      summary: Получить список сделок текущего пользователя
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, approved, rejected, cancelled]
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Список сделок пользователя
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                  total:
                    type: integer
                  page:
                    type: integer
                  pages:
                    type: integer

  # Существующие маршруты для администратора
  /admin/users:
    get:
      summary: Получить список всех пользователей
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Поиск по имени или CNIC
        - in: query
          name: status
          schema:
            type: string
            enum: [active, blocked]
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Список пользователей
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                  page:
                    type: integer
                  pages:
                    type: integer

  /admin/users/{userId}:
    put:
      summary: Обновить статус пользователя
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [active, blocked]
      responses:
        '200':
          description: Статус пользователя обновлен
        '404':
          description: Пользователь не найден

  /admin/transactions:
    get:
      summary: Получить список всех сделок
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, approved, rejected, cancelled]
        - in: query
          name: property_id
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Список сделок
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                  total:
                    type: integer
                  page:
                    type: integer
                  pages:
                    type: integer

  /admin/transactions/{transactionId}:
    put:
      summary: Обновить статус сделки
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: transactionId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [approved, rejected, cancelled]
                reason:
                  type: string
      responses:
        '200':
          description: Статус сделки обновлен
        '404':
          description: Сделка не найдена

  /admin/transactions/{transactionId}/documents:
    post:
      summary: Загрузить документы для сделки
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: transactionId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                documents:
                  type: array
                  items:
                    type: string
                    format: binary
                document_type:
                  type: string
                  enum: [contract, id_proof, payment_proof]
      responses:
        '200':
          description: Документы загружены
        '404':
          description: Сделка не найдена

  /admin/transactions/history/clear:
    post:
      summary: Очистить историю сделок
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                older_than:
                  type: string
                  format: date
                status:
                  type: array
                  items:
                    type: string
                    enum: [approved, rejected, cancelled]
      responses:
        '200':
          description: История очищена 
  # Существующие маршруты для администратора
                    type: integer 